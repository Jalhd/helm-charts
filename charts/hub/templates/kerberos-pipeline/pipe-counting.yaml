apiVersion: apps/v1
kind: Deployment
metadata:
  name: pipe-counting
  namespace: {{ .Release.Namespace }}
spec:
  replicas: {{ .Values.kerberospipeline.counting.replicas }}
  selector:
    matchLabels:
      app: pipe-counting
  minReadySeconds: 10
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxUnavailable: 1
      maxSurge: 1
  template:
    metadata:
      labels:
        app: pipe-counting
    spec:
      {{- with .Values.imagePullSecrets }}
      imagePullSecrets:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      containers:
      - name: pipe-counting
        image: "{{ .Values.global.imageRegistry }}{{ .Values.kerberospipeline.counting.repository }}:{{ .Values.kerberospipeline.counting.tag }}"
        imagePullPolicy: {{ .Values.kerberospipeline.counting.pullPolicy }}
        {{- with .Values.kerberospipeline.counting.resources }}
        resources:
          {{- toYaml . | nindent 12 }}
        {{- end }}
        env:
        - name: CLOUD_PROVIDER
          value: "{{ .Values.cloudProvider }}"
        - name: QUEUE_SYSTEM
          value: "{{ .Values.queueProvider }}"

        # Kafka settings
        - name: KAFKA_BROKER
          value: "{{ .Values.kafka.broker }}"
        - name: KAFKA_USERNAME
          value: "{{ .Values.kafka.username }}"
        - name: KAFKA_PASSWORD
          value: "{{ .Values.kafka.password }}"
        - name: KAFKA_MECHANISM
          value: "{{ .Values.kafka.mechanism }}"
        - name: KAFKA_SECURITY
          value: "{{ .Values.kafka.security }}"

        # RabbitMQ settings
        - name: RABBITMQ_HOST
          value: "{{ .Values.rabbitmq.host }}"
        - name: RABBITMQ_EXCHANGE
          value: "{{ .Values.rabbitmq.exchange }}"
        - name: RABBITMQ_USERNAME
          value: "{{ .Values.rabbitmq.username }}"
        - name: RABBITMQ_PASSWORD
          value: "{{ .Values.rabbitmq.password }}"
---
apiVersion: v1
kind: Service
metadata:
  labels:
    app: pipe-counting
    service: pipe
  name: pipe-counting
spec:
  ports:
    - name: hub-metrics
      port: 8080
      targetPort: 8080
      protocol: TCP
  selector:
    app: pipe-counting